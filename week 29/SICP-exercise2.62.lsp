#lang sicp

(define (element-of-set? x set)
  (cond ((null? set) false)
        ((= x (car set)) true)
        ((< x (car set)) false)
        (else (element-of-set? x (cdr set)))))

(define (union-set set1 set2)
  (cond ((and (null? set1) (null? set2)) '())
        ((null? set1) set2)
        ((null? set2) set1)
        (else 
     (let ((x1 (car set1)) (x2 (car set2)))
       (cond ((= x1 x2)
              (cons x1 (union-set (cdr set1) (cdr set2))))
             ((< x1 x2)
              (cons x1 (union-set (cdr set1) set2)))
             ((< x2 x1)
              (cons x2 (union-set set1 (cdr set2))))
        )))))

(union-set '() '()) ;=> ()
(union-set '() '(1 2)) ;=> (1 2)
(union-set '(1 2) '()) ; => (1 2)
(union-set '(1 2) '(1 2))
(union-set '(1 2) '(3 4)) ; => (1 2 3 4)
(union-set '(1 2) '(2 3)); => (1 2 3)
(union-set '(3 4) '(2 3)) ; => (2 3 4)
(union-set '(1 2 3 4) '(2 3 4 5)) ;=> (1 2 3 4 5)