#lang sicp

(define (average x y)
(/ (+ x y) 2))

(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (display guess)
    (display "\n")
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))


(fixed-point  (lambda (x)  (+ 1 (/ 1.0 x))) 1.0 ) ;=>
;1.0
;2.0
;1.5
;1.6666666666666665
;1.6
;1.625
;1.6153846153846154
;1.619047619047619
;1.6176470588235294
;1.6181818181818182
;1.6179775280898876
;1.6180555555555556
;1.6180257510729614
;1.6180371352785146
;1.6180327868852458

;Without average damping
(fixed-point  (lambda (x)  (/ (log 1000) (log x))) 1.1) ;=>
;1.1
;72.47657378429035
;1.6127318474109593
;14.45350138636525
;2.5862669415385087
;7.269672273367045
;3.4822383620848467
;5.536500810236703
;4.036406406288111
;4.95053682041456
;4.318707390180805
;4.721778787145103
;4.450341068884912
;4.626821434106115
;4.509360945293209
;4.586349500915509
;4.535372639594589
;4.568901484845316
;4.546751100777536
;4.561341971741742
;4.551712230641226
;4.558059671677587
;4.55387226495538
;4.556633177654167
;4.554812144696459
;4.556012967736543
;4.555220997683307
;4.555743265552239
;4.555398830243649
;4.555625974816275
;4.555476175432173
;4.555574964557791
;4.555509814636753
;4.555552779647764
;4.555524444961165
;4.555543131130589
;4.555530807938518
;4.555538934848503

;With average damping
(fixed-point  (lambda (x)  (average x (/ (log 1000) (log x)))) 1.1) ;=>
;1.1
;36.78828689214517
;19.352175531882512
;10.84183367957568
;6.870048352141772
;5.227224961967156
;4.701960195159289
;4.582196773201124
;4.560134229703681
;4.5563204194309606
;4.555669361784037
;4.555558462975639
;4.55553957996306
;4.555536364911781
