#lang racket
(require racket/trace)
;; Exercise 1.14: Draw the tree illustrating the process generated by the count-change procedure of
;; 1.2.2 in making change for 11 cents. What are the orders of growth of the space and number of
;; steps used by this process as the amount to be changed increases?

  ;; The number of ways to change amount `a` using `n` kinds of coins equals
  ;; the number of ways to change amount `a` using all but the first kind of coin, plus
  ;; the number of ways to change amount `a` - `d` using all `n` kinds of coins,
  ;; where `d` is the denomination of the first kind of coin.
  ;; If `a` is exactly 0, we should count that as 1 way to make change.
  ;; If `a` is less than 0, we should count that as 0 ways to make change.
  ;; If `n` is 0, we should count that as 0 ways to make change.

  ;; Resaid with the variables of the method subsititued. 
  ;; The number of ways to change `amount` using `kind-of-coins`. 
  ;; the number of ways to change `amount` using all but the first `kinds-of-coins`, plus
  ;; the number of ways to change amount `amount` - `d` using all `n` kinds of coins,
  ;; where `d` is the denomination of the first kind of coin.

  ;; If `amount` is exactly 0, we should count that as 1 way to make change.
  ;; If `amount` is less than 0, we should count that as 0 ways to make change.
  ;; If `kinds-of-coins` is 0, we should count that as 0 ways to make change.

  (define (count-change amount)
    (cc amount 5))
  (define (cc amount kinds-of-coins)
    (cond ((= amount 0) 1)
          ((or (< amount 0) (= kinds-of-coins 0)) 0)
          (else (+ (cc amount
                      (- kinds-of-coins 1))
                  (cc (- amount
                          (first-denomination kinds-of-coins))
                      kinds-of-coins)))))
  (define (first-denomination kinds-of-coins)
    (cond ((= kinds-of-coins 1) 1)
          ((= kinds-of-coins 2) 5)
          ((= kinds-of-coins 3) 10)
          ((= kinds-of-coins 4) 25)
          ((= kinds-of-coins 5) 50)))

  (trace cc)
  (count-change 11)


  ;; Order of growth of space
    ;; Since this is a recursive process, the orders of growth of the space will be proportional
    ;; to the depth of the calls.

    ;; It is easy to see that the longest series of calls will be when doing the change of 
    ;; the amount n using only pennies. The order of growth of space for cc will be Θ(n)

;; Order of growth of space 
  ;; This is recursive meaning it will generaly grow at Θ(n)^2? 


  ;; Graphviz code: 
    ;; http://telegraphics.com.au/svn/puzzles/trunk/sicp/count-change-tree.scm